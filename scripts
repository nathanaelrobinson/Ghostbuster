import random
import pandas as pd
import matplotlib as plt
import numpy as np
import math

def campfire():
	locations = [0,18,36,54,72,90,108,126,144,162,180,198,216,234,252,270,288,306,324,342]
	p1 = []
	p2 = []
	p3 = []
	p4 = []
	random.shuffle(locations)
	DA1 = locations.pop()
	g1 = locations.pop()
	DA2 = locations.pop()
	g2 = locations.pop()
	p1.append(math.cos(math.radians(DA1)))
	p1.append(math.sin(math.radians(DA1)))
	p2.append(math.cos(math.radians(g1)))
	p2.append(math.sin(math.radians(g1)))
	p3.append(math.cos(math.radians(DA2)))
	p3.append(math.sin(math.radians(DA2)))
	p4.append(math.cos(math.radians(g2)))
	p4.append(math.sin(math.radians(g2)))
	return p1, p2, p3, p4
	
	
def lines(p1, p2, p3, p4):
	coeff1 = np.polyfit(p1, p2, 1)
	coeff2 = np.polyfit(p3, p4, 1)
	line1 = [coeff1[0], coeff1[1]]
	line2 = [coeff2[0], coeff2[1]]
	return line1, line2


def get_intersection1(line1, line2):
    """Returns the point of intersection of two lines via cross product.
    :param line1: [slope, intercept].T of the first line.
    :param line2: [slope, intercept].T of the second line.
    """
    l1=np.insert(line1, 1, -1)
    l2=np.insert(line2, 1, -1)
    x, y, z= np.cross(l1, l2)
    return np.hstack([x, y]) / z
	
def in_circle(point):
	if (point[0]**2 + point[1]**2) > 1:
		return False
	elif (point[0]**2 + point[1]**2) < 1:
		return True
		
def kill_ghosts():
	p1, p2, p3, p4 = campfire()
	beam1, beam2 = lines(p1,p2,p3,p4)
	point = get_intersection1(beam1,beam2)	
	return in_circle(point)
	
def ghostbusters(iterations):
	true_values = 0
	false_values = 0
	moving_average = []
	for i in range(1,iterations):
		if kill_ghosts() == True:
			true_values += 1.0
		else:
			false_values += 1.0
		avg = true_values/i
		moving_average.append(avg)
	return moving_average
	
